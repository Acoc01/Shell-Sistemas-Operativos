vector<command_t> utils::piparse(string s){
    vector<command_t> v;
    command_t caux;
    int cont=0, flag =0;
    string aux;
    for(int i=0; i<s.length();i++){
        if(s[i]==' '){
            if(flag==0){
                caux.cmd=aux;
                aux.clear();
                flag++;
            }else{
                caux.args.push_back(aux);
                aux.clear();
            }
        }else if(s[i]=='|'){
            i++;
            flag--;
            v.push_back(caux);
            caux.cmd.clear();
            caux.args.clear();
        }else if(i==s.length()-1){
            aux+=s[i];
            if(flag==0){
                caux.cmd=aux;
                aux.clear();
                flag++;
            }else{
                caux.args.push_back(aux);
                aux.clear();
            }
            v.push_back(caux);
            caux.cmd.clear();
            caux.args.clear(); 
        }else aux+=s[i];
    }
    return v;
}

void utils::pipes(std::string in){
    int status;
    int tam=utils::count_pipes(in);
    int pipes[2][2];
    vector <command_t> p= utils::piparse(in);
    
    if(fork()==0){
    cout<<"entrada1"<<endl;
        dup2(pipes[0][1], 1);
        close(pipes[0][0]);
        for(int i=0;i<tam;i++){
            for(int j=0;j<2;j++){
                close(pipes[i][j]);
            }
        }
	vector<char *> c =utils::tocstr(p[0]);
        execvp(c[0],c.data());
        cout<<"ERROR al ejecutar el comando"<<endl;

    }else{
    	if(tam>1){
	    if(fork()==0){
	    cout<<"porque"<<endl;
		 for(int k=1;k<tam;k++){
		   dup2(pipes[k-1][0], 0);
		   dup2(pipes[k][1], 1);
		   for(int i=0;i<tam;i++){
		      for(int j=0;j<2;j++){
		         close(pipes[i][j]);
		      }
		   }
		   vector<char *> c =utils::tocstr(p[k]);
		   execvp(c[0],c.data());
		   cout<<"ERROR al ejecutar el comando"<<endl;
	        }
            }
       }else{
          if(fork()==0){
          cout<<"entrada2"<<endl;
             dup2(pipes[tam-1][0], 0);
             close(pipes[tam-1][1]);
             
             for(int i=0;i<tam;i++){
		 for(int j=0;j<2;j++){
		    close(pipes[i][j]);
		 }
	     }
             
             vector<char *> c =utils::tocstr(p[tam]);
		cout<<"entrada 3"<<endl;
   		cout<<"entra"<<endl;
   		for(auto i: c){
                	cout<<i<<endl;
                }
             execvp(c[0],c.data());
             cout<<"ERROR al ejecutar el comando"<<endl;
           }
        }
    }
    cout<<"final"<<endl;
    for(int i=0;i<2;i++){
       for(int j=0;j<2;j++){
           close(pipes[i][j]);
       }
    }
    for(int i=0;i<2;i++){
       for(int j=0;j<2;j++){
           wait(NULL);
       }
    }
}
