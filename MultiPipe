#include "utils.h"
#include <cstring>
#include <iostream>
#include <string>
#include <sys/wait.h>
#include <unistd.h>
#include <vector>

using namespace std;

pair<char*, vector<char*>> clean(command_t &c){
    char* command= c.cmd;
    vector<char*> v1;
    int cont=0;
    for(vector<char*>::iterator i = c.arg.begin(); i!=c.arg.end();i++){
        cont++;
        if(*i=="|"){
            break;
        }else {
            v1.push_back(*i);
        }
    }
    c.arg.erase(c.arg.begin(), c.arg.begin()+cont);
    auto p = make_pair(command, v1);
    c.cmd=c.arg.begin();
    return p;
}

void pipes(std::string in, command_t &c){
    int status;
    int tam=utils::count_pipes(in);
    int pipes[tam][2];

    utils::parse(in,&c);
    int place=0;
    char* com;
    vector<char*> s;

    if(fork()==0){
        dup2(pipes[0][1], 1);
        for(int i=0;i<tam;i++){
            for(int j=0;i<2;j++){
                close(pipes[i][j]);
            }
        }

        com=clean(c).first();
        s=clean(c).second;

        execvp(com,s);

        place++;
    }else{
        for(place;place<tam;place++){
            dup2(pipes[place-1][0], 0);
            dup2(pipes[place][1], 1);
            for(int i=0;i<tam;i++){
                for(int j=0;i<2;j++){
                    close(pipes[i][j]);
                }
            }
            com=clean(c).first();
            s=clean(c).second;

            execvp(com,s);
        }
    }else{
        if(fork()==0){
            dup2(pipes[place][0], 0);
            for(int i=0;i<tam;i++){
                for(int j=0;i<2;j++){
                    close(pipes[i][j]);
                }
            }
            com=clean(c).first();
            s=clean(c).second;

            execvp(com,s);
        }
    }
    for(int i=0;i<tam;i++){
        for(int j=0;i<2;j++){
            close(pipes[i][j]);
        }
    }
    for(int i=0;i<tam;i++){
        for(int j=0;i<2;j++){
            wait(&status);
        }
    }
}
